---
title: "Danish registry analyses LTMLE specifications"
author: "Andrew Mertens"
format: html
editor: visual
---

```{r, include=F}

knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

library(tidyverse)
library(data.table)
library(ltmle)
library(here)


spec_nodes <- function(baseline_vars, longitudinal_vars, num_time){
  node_names <- c(baseline_vars, expand.grid(longitudinal_vars, num_time) %>%
                    apply(1, function(row) paste0(row, collapse = "")))
  node_names <- gsub(" ","",node_names)
  return(node_names)
}


spec_analysis <- function(data, long_covariates, baseline_vars, N_time, Avars, Yvars, Cvars){
  
  node_names <- spec_nodes(baseline_vars=(baseline_vars),
                           longitudinal_vars=c(Avars, Cvars,Yvars,long_covariates),
                           num_time=0:(N_time-1))
  node_names <- node_names[!(node_names %in% c(paste0(Yvars,0),paste0(Cvars,0),paste0(Avars,0),"event_death_0"))]
  #Drop final timepoint
  for(i in long_covariates){
    node_names <- node_names[!(grepl(paste0(i,(N_time-1)),node_names))]
  }
  
  Lnode_names <- c(baseline_vars, expand.grid(long_covariates,0:(N_time-1)) %>% apply(1, function(row) paste0(row, collapse = "")))
  Lnode_names <- gsub(" ","", Lnode_names)
  #Drop final timepoint
  Lnode_names <- Lnode_names[!(grepl(paste0("_",(N_time-1)),Lnode_names))]
  Lnode_names <- Lnode_names[!(Lnode_names %in% c("event_death_0"))]
  
  
  #subset to analysis columns and arrange
  d_ltmle <- data %>% dplyr::select(!!(node_names))
  #colnames(d_ltmle)
  
  #clean censoring nodes to right format
  Cnode_names = node_names[grep(paste0("^",Cvars), node_names)]
  for(i in Cnode_names){
    d_ltmle[[i]] <- BinaryToCensoring(is.censored=d_ltmle[[i]])
  }
  
  
  
  return(list(
    data=d_ltmle,
    node_names=node_names,
    Anodes = node_names[sort(grep(paste("^",Avars, collapse="|", sep=""), node_names))],
    Cnodes = Cnode_names,
    Lnodes = Lnode_names,
    Ynodes = node_names[sort(grep(paste("^",Yvars, collapse="|", sep=""), node_names))]
  ))
}



d <- readRDS(here::here("data/example_simulated_data.RDS"))


baseline_vars = c("ie_type","age_base","sex", "code5txt", "quartile_income")


```

## Example data discription

Simulated data, simplified L, shortened followup, high administrative censoring, GLM estimation

Data:

```{r, echo=FALSE}

head(d, 3)

```

#### Baseline covariates:

`baseline_vars = c("ie_type","age_base","sex","code5txt","quartile_income")`

#### Longitudinal covariates:

Insulin, hypertension, and 2nd line diabetes drugs not a part of the Also including death as a competing risk by including it in $L$. Note we specify a deterministic Q Function

## 1) Target Causal Parameter 1

We define two target causal parameters of interest for the purposes of this analysis: one intervening only on the exposure of interest, use of GLP-1RAs ($A_1 (t), C(t)$), and the other intervening additionally on an active comparator of interest, $A_2 (t)$.

Our counterfactual outcomes of interest when intervening only on $A_1$ correspond to the time to diagnosis of dementia that would have been seen under these two hypothetical regimes: $$Y_{\bar{a}_1=1, c=0}(t),Y_{\bar{a}_1=0, c=0}(t), t=1,...,K+1 $$

Our counterfactual outcomes of interest when intervening on both $A_1$ and active comparator $A_2$ correspond to the time to diagnosis of dementia that would have been seen under these two hypothetical regimes: $$Y_{\bar{a}_1=1,\bar{a}_2=0, c=0}(t),Y_{\bar{a}_1=0,\bar{a}_2=1, c=0}(t), t=1,...,K+1 $$

In our first target parameter, we are interested in the cumulative causal risk difference for dementia diagnosis up to the maximum of follow up time if all patients had complied with the intervention arm vs. the control arm, intervening to prevent administrative censoring: $$E[Y_{\bar{a}_1=1, c=0}]-E[Y_{\bar{a}_1=0, c=0}]$$

$$Y_{\bar{a}_1=1, c=0}(t),Y_{\bar{a}_1=0, c=0}(t), t=1,...,K+1 $$

#### Analysis setup

```{r}

#-------------------------------------------------------------------------------
#  Contrasting if everyone had glp1 versus not
#-------------------------------------------------------------------------------


long_covariates = c("insulin_","hypertension_", "sglt2_inhib_","other_drugs_", "event_death_")


#specify LTMLE analysis
spec_ltmle <- spec_analysis(data=d, long_covariates, baseline_vars, 
                            N_time=4,
                            Avars="glp1_",
                            Yvars="event_dementia_",
                            Cvars="censor_")

```

A Nodes `{r spec_ltmle$Anodes}` C Nodes `{r spec_ltmle$Cnodes}` L Nodes `{r spec_ltmle$Lnodes}` Y Nodes `{r spec_ltmle$Ynodes}`

#### specify the intervened treatment

```{r}
abar_spec = list(rep(1,3),rep(0,3))
abar_spec
```

#### Specify function to handle death as a competing risk

```{r}

det.Q.function <- function(data, current.node, nodes, called.from.estimate.g){
  death.index <- grep("death_",names(data))
  if(length(death.index)==0)stop("no node found")
  hist.death.index <- death.index[death.index < current.node]
  if(length(hist.death.index)==0)return(NULL)
  if(length(hist.death.index)==1){
    is.deterministic <- data[,hist.death.index]==1
  } else {
   is.deterministic <- apply(data[,hist.death.index]==1,1,any)
 }#if death before, remove from fitting
  is.deterministic[is.na(is.deterministic)] <- F
  return(list(is.deterministic=is.deterministic, Q.value=0))

}
```

#### Run analysis for TCP1:

```{r}

res_RR <- ltmle(data=spec_ltmle$data,
                  Anodes = spec_ltmle$Anodes,
                  Cnodes = spec_ltmle$Cnodes,
                  Lnodes = spec_ltmle$Lnodes,
                  Ynodes = spec_ltmle$Ynodes,
                  survivalOutcome = T,
                  abar = abar_spec,
                  deterministic.Q.function = det.Q.function,
                  SL.library = "glm",
                  variance.method = "ic")

res<-summary(res_RR)
res$effect.measures$RR$estimate
res$effect.measures$RR$CI

```

## 2) Target Causal Parameter 2

In our second target causal parameter, we additionally intervene on an active comparator: $$E[Y_{\bar{a}_1=1,\bar{a}_2=0, c=0}]-E[Y_{\bar{a}_1=0,\bar{a}_2=1, c=0}]$$

Here, we are contrasting full GLP-RA use, no active comparator use and no administrative censoring throughout follow up, compared to full active comparator use (eg. SGLT2), no GLP1-RA use and no administrative censoring throughout follow up.

#### Analysis setup:

```{r}
#-------------------------------------------------------------------------------
#  Contrasting if everyone had glp1 versus if everyone was on sglt2
#-------------------------------------------------------------------------------

long_covariates = c("insulin_","hypertension_","other_drugs_", "event_death_")


#specify LTMLE analysis
spec_ltmle <- spec_analysis(data=d, long_covariates, baseline_vars, 
                            N_time=4,
                            Avars=c("glp1_","sglt2_inhib_"),
                            Yvars=c("event_dementia_"),
                            Cvars=c("censor_"))
#A Nodes
spec_ltmle$Anodes

#C Nodes
spec_ltmle$Cnodes

#L Nodes
spec_ltmle$Lnodes

#Y Nodes
spec_ltmle$Ynodes

#specify the intervened treatment
abar_spec = list(rep(c(1,0),3),rep(c(0,1),3))
abar_spec

```

#### Run analysis for TCP2:

```{r}

   res_RR <- ltmle(data=spec_ltmle$data,
                  Anodes = spec_ltmle$Anodes,
                  Cnodes = spec_ltmle$Cnodes,
                  Lnodes = spec_ltmle$Lnodes,
                  Ynodes = spec_ltmle$Ynodes,
                  survivalOutcome = T,
                  abar = abar_spec,
                  deterministic.Q.function = det.Q.function,
                  SL.library = "glm",
                  variance.method = "ic" )

res<-summary(res_RR)
res$effect.measures$RR$estimate
res$effect.measures$RR$CI

```

#### 3) Run analysis for TCP2 with treatment holidays:

```{r}

SI_function1 <- function(data, current.node, nodes) {
  # if not an A node, then skip
  # if there is no previous node, then treat as usual
  Anodes <- nodes$A
  if (!(current.node %in% Anodes)) return(NULL) 
  if (!(any(Anodes < current.node))) return(NULL) 

  # if t-1 for the specific A node is treated, then deterministically set to be the observed value; (when observed value is not NA)
  # prob1 is the prob of being 1, equal to obs value here: observed 1, set a^d_t = obs value with prob 1; observed 0, set a^d_t = obs value with prob 0
  # if t-1 is not treated, then treat as usual (not deterministic)
  #note that t-1 for a specific type of A is t-4 when there are 4 types of treatments (-3 from the max index of previous Anodes)
  
  #get Anodes prior to current.node
  prev.a.node <- max(Anodes[Anodes < current.node])
  is.deterministic <- ifelse(!is.na(data[, current.node]) & !is.na(prev.a.node), data[, prev.a.node] == 1, F)
  prob1 <- data[, current.node][is.deterministic]

  return(list(is.deterministic=is.deterministic, prob1=prob1))  
}

   res_RR <- ltmle(data=spec_ltmle$data,
                  Anodes = spec_ltmle$Anodes,
                  Cnodes = spec_ltmle$Cnodes,
                  Lnodes = spec_ltmle$Lnodes,
                  Ynodes = spec_ltmle$Ynodes,
                  survivalOutcome = T,
                  abar = abar_spec,
                  deterministic.g.function = SI_function1,
                  deterministic.Q.function = det.Q.function,
                  SL.library = "glm",
                  variance.method = "ic" )

res<-summary(res_RR)
res$effect.measures$RR$estimate
res$effect.measures$RR$CI

```

## 4) Contrast of 2 dual treatment regimes with treatment holiday but no 3rd drug usages

Start on GLP1 and SGLT2 drugs

Allow 1-node gaps in treatment

Don't allow switch to or addition of other drugs -how to specify?

use "rule" or multiple abar's for the treatment holidays

#### Setup analysis for TCP- dual treatment:

```{r}

#-------------------------------------------------------------------------------
#  Contrasting the effect of being on both glp1 and sglt2 versus being on both
#  sglt2 and dpp4. 
#  Allow treatment gaps of one time node
#  Do not allow switch to other 2nd line
#  other 2nd line (for the purpose of this example consider "other 2nd line"
#  as a single drug like dpp4)
#-------------------------------------------------------------------------------

long_covariates = c("insulin_","hypertension_", "event_death_")

#Make mock DPP4 drug for purposes of 
set.seed(123456)
d$dpp4_0 <- d$dpp4_1 <- d$dpp4_2 <- d$dpp4_3 <- rbinom(nrow(d),1, 0.1)

#specify LTMLE analysis
spec_ltmle <- spec_analysis(data=d, long_covariates, baseline_vars, 
                            N_time=4, Avars=c("glp1_","sglt2_inhib_","dpp4_","other_drugs_"),
                            Yvars=c("event_dementia_"),
                            Cvars=c("censor_"))
#A Nodes
spec_ltmle$Anodes

#C Nodes
spec_ltmle$Cnodes

#L Nodes
spec_ltmle$Lnodes

#Y Nodes
spec_ltmle$Ynodes

#specify the intervened treatment
abar_spec = list(rep(c(1,1,0,0),3),rep(c(1,0,1,0),3))
abar_spec

#rule <- function(row) c(1, row["L"] > 0)
#I think the rule argument shouldn't be used as it allows for dynamic treatment

# stochastic intervention to allow for treatment holidays
SI_function2 <- function(data, current.node, nodes) {
  # if not an A node, then skip
  # if there is no previous node, then treat as usual
  Anodes <- nodes$A
  if (!(current.node %in% Anodes)) return(NULL) 
  if (!(any(Anodes < current.node))) return(NULL) 

  # if t-1 for the specific A node is treated, then deterministically set to be the observed value; (when observed value is not NA)
  # prob1 is the prob of being 1, equal to obs value here: observed 1, set a^d_t = obs value with prob 1; observed 0, set a^d_t = obs value with prob 0
  # if t-1 is not treated, then treat as usual (not deterministic)
  #note that t-1 for a specific type of A is t-4 when there are 4 types of treatments (-3 from the max index of previous Anodes)
  
  #get Anodes prior to current.node
  prior.Anodes <- Anodes[Anodes < current.node]
  #Get the last of the same Anode (indexed by 4 for 4 unique drugs)
  prev.a.node <- rev(prior.Anodes)[4]
  is.deterministic <- ifelse(!is.na(data[, current.node]) & !is.na(prev.a.node), data[, prev.a.node] == 1, F)
  prob1 <- data[, current.node][is.deterministic]

  return(list(is.deterministic=is.deterministic, prob1=prob1))  
}



```

#### Run analysis for TCP- dual treatment:

```{r}

   res_RR <- ltmle(data=spec_ltmle$data,
                  Anodes = spec_ltmle$Anodes,
                  Cnodes = spec_ltmle$Cnodes,
                  Lnodes = spec_ltmle$Lnodes,
                  Ynodes = spec_ltmle$Ynodes,
                  survivalOutcome = T,
                  abar = abar_spec,
                  deterministic.g.function = SI_function2,
                  deterministic.Q.function = det.Q.function,
                  SL.library = "glm",
                  variance.method = "ic" )

res<-summary(res_RR)
res$effect.measures$RR$estimate
res$effect.measures$RR$CI

```

If you need to use `tmle` variance, you can't have a deterministic.Q.function, but it looks like you can have a deterministic.g.function

```{r}

   res_RR <- ltmle(data=spec_ltmle$data,
                  Anodes = spec_ltmle$Anodes,
                  Cnodes = spec_ltmle$Cnodes,
                  Lnodes = spec_ltmle$Lnodes,
                  Ynodes = spec_ltmle$Ynodes,
                  survivalOutcome = T,
                  abar = abar_spec,
                  deterministic.g.function = SI_function2,
                  deterministic.Q.function = NULL,
                  SL.library = "glm",
                  variance.method = "tmle" )

res<-summary(res_RR)
res$effect.measures$RR$estimate
res$effect.measures$RR$CI

```

NOTE! Think through the impact of applying the Deterministic g function on all A nodes (including the drugs not a part of the regime) instead of just the treatment drugs
